
test {
    name    = Beispieltest Teil 1 (stdout)
    comment = Testet die Ausgabe des Tools auf der Standardausgabe
    type    = param
    cmd     {cat ./testfaelle/beispieltest.in | DUT ./out/beispieltest.out}
    expect  {^SoRichtigSchlecht$}
}

test {
    name    = Beispieltest Teil 2 (Datei)
    comment = Testet die in Beispieltest Teil 1 geschriebene Datei
    type    = param
    cmd     {diff ./out/beispieltest.out ./testfaelle/beispieltest.exp}
    expect  {^$}
}

test {
    name    = Test 2 Bereits fertig vorsortiert (stdout)
    comment = Testet die Ausgabe des Tools auf der Standardausgabe
    type    = param
    cmd     {cat ./testfaelle/vorsortiert.in | DUT ./out/vorsortiert.out}
    expect  {^gibt$}
}

test {
    name    = Test 3 Bereits fertig vorsortiert (Datei)
    comment = Testet den Fall, dass alle Eintraege bereits vorsortiert sind
    type    = param
    cmd     {diff ./out/vorsortiert.out ./testfaelle/vorsortiert.exp}
    expect  {^$}
}

test {
    name    = Test 4 andersrum vorsortiert (stdout)
    comment = Testet die Ausgabe des Tools auf der Standardausgabe
    type    = param
    cmd     {cat ./testfaelle/unvorsortiert.in | DUT ./out/unvorsortiert.out}
    expect  {^Schlechtester$}
}

test {
    name    = Test 5 andersrum vorsortiert (Datei)
    comment = Testet den Fall, dass alle Eintraege bereits vorsortiert sind
    type    = param
    cmd     {diff ./out/unvorsortiert.out ./testfaelle/unvorsortiert.exp}
    expect  {^$}
}

test {
    name    = Test 6 Bewertung gleich (stdout)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {cat ./testfaelle/bewertungGleich.in | DUT ./out/bewertungGleich.out}
    expect  {^Schlecht$}
}

test {
    name    = Test 7 Bewertung gleich (Datei)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {diff ./out/bewertungGleich.out ./testfaelle/bewertungGleich.exp}
    expect  {^$}
}

test {
    name    = Test 8 Bewertung gleich 2 (stdout)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {cat ./testfaelle/bewertungGleich2.in | DUT ./out/bewertungGleich2.out}
    expect  {^Schlecht$}
}

test {
    name    = Test 9 Bewertung gleich 2 (Datei)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {diff ./out/bewertungGleich2.out ./testfaelle/bewertungGleich2.exp}
    expect  {^$}
}

test {
    name    = Test 10 Alle Bewertungen gleich (stdout)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {cat ./testfaelle/alleGleicheBewertung.in | DUT ./out/alleGleicheBewertung.out}
    expect  {^Gut$}
}

test {
    name    = Test 11 Alle Bewertungen gleich (Datei)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {diff ./out/alleGleicheBewertung.out ./testfaelle/alleGleicheBewertung.exp}
    expect  {^$}
}

test {
    name    = Test 12 Viele Fehlerhafte Zeilen (stdout)
    comment = Testet den Fall, dass es mehrere fehlerhafte Zeilen gibt
    type    = param
    cmd     {cat ./testfaelle/mitFehlern.in | DUT ./out/mitFehlern.out}
    expect  {^SoRichtigSchlecht$}
}

test {
    name    = Test 13 Viele Fehlerhafte Zeilen (Datei)
    comment = Testet den Fall, dass es mehrere fehlerhafte Zeilen gibt
    type    = param
    cmd     {diff ./out/mitFehlern.out ./testfaelle/mitFehlern.exp}
    expect  {^$}
}

test {
    name    = Test 14 Nur Fehler (stdout)
    comment = Testet den Fall, nur fehlerhafte Zeilen enthalten sind
    type    = param
    cmd     {cat ./testfaelle/nurFehler.in | DUT ./out/nurFehler.out}
    expect  {^$}
}

test {
    name    = Test 15 Nur Fehler (Datei)
    comment = Testet den Fall, nur fehlerhafte Zeilen enthalten sind
    type    = param
    cmd     {cat ./out/nurFehler.out}
    expect  {^$}
}

test {
    name    = Test 16 leer (stdout)
    comment = Testet den Fall, dass die Datei leer ist
    type    = param
    cmd     {cat ./testfaelle/leer.in | DUT ./out/leer.out}
    expect  {^$}
}

test {
    name    = Test 17 leer(Datei)
    comment = Testet den Fall, dass die Datei leer ist
    type    = param
    cmd     {cat ./out/leer.out}
    expect  {^$}
}

test {
    name    = Test 18 nur zwei Zeilen (stdout)
    comment = Testet den Fall, dass die Datei nur zwei Zeilen hat
    type    = param
    cmd     {cat ./testfaelle/nurZweiZeilen.in | DUT ./out/nurZweiZeilen.out}
    expect  {^NichtGanzSoSchlecht$}
}

test {
    name    = Test 19 nur zwei Zeilen (Datei)
    comment = Testet den Fall, dass die Datei nur zwei Zeilen hat
    type    = param
    cmd     {diff ./out/nurZweiZeilen.out ./testfaelle/nurZweiZeilen.exp}
    expect  {^$}
}

test {
    name    = Test 20 - 10 Zeilen (stdout)
    comment = Testet den Fall, dass die Datei zehn Eintraege hat
    type    = param
    cmd     {cat ./testfaelle/vieleZeilen.in | DUT ./out/vieleZeilen.out}
    expect  {^sehrSchlecht$}
}

test {
    name    = Test 21 - 10 Zeilen (Datei)
    comment = Testet den Fall, dass die Datei zehn Eintraege hat
    type    = param
    cmd     {diff ./out/vieleZeilen.out ./testfaelle/vieleZeilen.exp}
    expect  {^$}
}

test {
    name    = Test 22 - Negative Bewertungen (stdout)
    comment = Testet den Fall, dass ein Eintrag eine negative Bewertung hat
    type    = param
    cmd     {cat ./testfaelle/negativeBewertung.in | DUT ./out/negativeBewertung.out}
    expect  {^unfassbarSchlecht$}
}

test {
    name    = Test 23 - Negative Bewertungen (Datei)
    comment = Testet den Fall, dass ein Eintrag eine negative Bewertung hat
    type    = param
    cmd     {diff ./out/negativeBewertung.out ./testfaelle/negativeBewertung.exp}
    expect  {^$}
}

test {
    name    = Test 24 - große Bewertungen (stdout)
    comment = Testet den Fall, dass einige Bewertungen große Zahlen sind
    type    = param
    cmd     {cat ./testfaelle/grosseBewertungen.in | DUT ./out/grosseBewertungen.out}
    expect  {^sehrSchlecht$}
}

test {
    name    = Test 25 - große Bewertungen (Datei)
    comment = Testet den Fall, dass einige Bewertungen große Zahlen sind
    type    = param
    cmd     {diff ./out/grosseBewertungen.out ./testfaelle/grosseBewertungen.exp}
    expect  {^$}
}

test {
    name    = Test 26 - Alles gleich (stdout)
    comment = Testet den (nicht geforderten) Fall, dass alle Eintraege identisch sind
    type    = param
    cmd     {cat ./testfaelle/allesGleich.in | DUT ./out/allesGleich.out}
    expect  {^Gut$}
}

test {
    name    = Test 27 - Alles gleich (Datei)
    comment = Testet den (nicht geforderten) Fall, dass alle Eintraege identisch sind
    type    = param
    cmd     {diff ./out/allesGleich.out ./testfaelle/allesGleich.exp}
    expect  {^$}
}

