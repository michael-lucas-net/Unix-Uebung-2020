
test {
    name    = Beispieltest Teil 1 (stdout)
    comment = Testet die Ausgabe des Tools auf der Standardausgabe
    type    = param
    cmd     {cat beispieltest.in | DUT beispieltest.out}
    expect  {^SoRichtigSchlecht$}
}

test {
    name    = Beispieltest Teil 2 (Datei)
    comment = Testet die in Beispieltest Teil 1 geschriebene Datei
    type    = param
    cmd     {diff beispieltest.out beispieltest.exp}
    expect  {^$}
}

test {
    name    = Test 2 Bereits fertig vorsortiert (stdout)
    comment = Testet die Ausgabe des Tools auf der Standardausgabe
    type    = param
    cmd     {cat vorsortiert.in | DUT vorsortiert.out}
    expect  {^gibt$}
}

test {
    name    = Test 3 Bereits fertig vorsortiert (Datei)
    comment = Testet den Fall, dass alle Eintraege bereits vorsortiert sind
    type    = param
    cmd     {diff vorsortiert.out vorsortiert.exp}
    expect  {^$}
}

test {
    name    = Test 4 andersrum vorsortiert (stdout)
    comment = Testet die Ausgabe des Tools auf der Standardausgabe
    type    = param
    cmd     {cat unvorsortiert.in | DUT unvorsortiert.out}
    expect  {^Schlechtester$}
}

test {
    name    = Test 5 andersrum vorsortiert (Datei)
    comment = Testet den Fall, dass alle Eintraege bereits vorsortiert sind
    type    = param
    cmd     {diff unvorsortiert.out unvorsortiert.exp}
    expect  {^$}
}

test {
    name    = Test 6 Bewertung gleich (stdout)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {cat bewertungGleich.in | DUT bewertungGleich.out}
    expect  {^Schlecht$}
}

test {
    name    = Test 7 Bewertung gleich (Datei)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {diff bewertungGleich.out bewertungGleich.exp}
    expect  {^$}
}

test {
    name    = Test 8 Bewertung gleich 2 (stdout)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {cat bewertungGleich2.in | DUT bewertungGleich2.out}
    expect  {^Schlecht$}
}

test {
    name    = Test 9 Bewertung gleich 2 (Datei)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {diff bewertungGleich2.out bewertungGleich2.exp}
    expect  {^$}
}

test {
    name    = Test 10 Alle Bewertungen gleich (stdout)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {cat alleGleicheBewertung.in | DUT alleGleicheBewertung.out}
    expect  {^Gut$}
}

test {
    name    = Test 11 Alle Bewertungen gleich (Datei)
    comment = Testet den Fall, dass die Bewertung gleich ist - jetzt nach Kennzahl sortieren
    type    = param
    cmd     {diff alleGleicheBewertung.out alleGleicheBewertung.exp}
    expect  {^$}
}

test {
    name    = Test 12 Viele Fehlerhafte Zeilen (stdout)
    comment = Testet den Fall, dass es mehrere fehlerhafte Zeilen gibt
    type    = param
    cmd     {cat mitFehlern.in | DUT mitFehlern.out}
    expect  {^SoRichtigSchlecht$}
}

test {
    name    = Test 13 Viele Fehlerhafte Zeilen (Datei)
    comment = Testet den Fall, dass es mehrere fehlerhafte Zeilen gibt
    type    = param
    cmd     {diff mitFehlern.out mitFehlern.exp}
    expect  {^$}
}

test {
    name    = Test 14 Nur Fehler (stdout)
    comment = Testet den Fall, nur fehlerhafte Zeilen enthalten sind
    type    = param
    cmd     {cat nurFehler.in | DUT nurFehler.out}
    expect  {^$}
}

test {
    name    = Test 15 Nur Fehler (Datei)
    comment = Testet den Fall, nur fehlerhafte Zeilen enthalten sind
    type    = param
    cmd     {cat nurFehler.out}
    expect  {^$}
}

test {
    name    = Test 16 leer (stdout)
    comment = Testet den Fall, dass die Datei leer ist
    type    = param
    cmd     {cat leer.in | DUT leer.out}
    expect  {^$}
}

test {
    name    = Test 17 leer(Datei)
    comment = Testet den Fall, dass die Datei leer ist
    type    = param
    cmd     {cat leer.out}
    expect  {^$}
}

test {
    name    = Test 18 nur zwei Zeilen (stdout)
    comment = Testet den Fall, dass die Datei nur zwei Zeilen hat
    type    = param
    cmd     {cat nurZweiZeilen.in | DUT nurZweiZeilen.out}
    expect  {^NichtGanzSoSchlecht$}
}

test {
    name    = Test 19 nur zwei Zeilen (Datei)
    comment = Testet den Fall, dass die Datei nur zwei Zeilen hat
    type    = param
    cmd     {diff nurZweiZeilen.out nurZweiZeilen.exp}
    expect  {^$}
}

test {
    name    = Test 20 - 10 Zeilen (stdout)
    comment = Testet den Fall, dass die Datei zehn Eintraege hat
    type    = param
    cmd     {cat vieleZeilen.in | DUT vieleZeilen.out}
    expect  {^sehrSchlecht$}
}

test {
    name    = Test 20 - 10 Zeilen (Datei)
    comment = Testet den Fall, dass die Datei zehn Eintraege hat
    type    = param
    cmd     {diff vieleZeilen.out vieleZeilen.exp}
    expect  {^$}
}

