
test {
    name    = 1. Hilfeaufruf: Ausgabe
    comment = Hilfetext anfordern und ueberpruefen
    type    = param
    cmd       {DUT -h | diff - testfaelle/help.exp}
    expect    {^$}
}

test {
    name    = 2a. Hilfeaufruf: Exit code
    comment = Erwartet einen exit code von 0 bei korrektem Hilfeaufruf
    type    = param
    cmd       {DUT -h 1>/dev/null && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 2b. Hilfeaufruf: Exit code (zweite Variante zur Ueberpruefung)
    comment = Erwartet einen exit code von 0 bei korrektem Hilfeaufruf
    type    = param
    cmd       {DUT -h 1>/dev/null ; echo "$?"}
    expect    {^0$}
}

test {
    name    = 3a. Korrekter Aufruf mit einfacher Additition
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 1 2 ADD 1> ./out/add1_result.out 2>./out/add1_history.out ; diff ./out/add1_result.out ./testfaelle/example_out.exp && diff ./out/add1_history.out ./testfaelle/example_err.exp && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 3b. Korrekter Aufruf mit einfacher Addition 
    comment = Erwartet die History auf stderr und prueft nur diese
    type    = param
    cmd       {DUT 1 2 ADD 2>&1 1>/dev/null}
    expect    {^> ADD 1 2$}
}

test {
    name    = 3c. Korrekter Aufruf mit einfacher Addition
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 1 2 ADD 2>/dev/null }
    expect    {^3$}
}

test {
    name    = 4. Fehlerhafter Hilfe-Aufruf
    comment = Erwartet Fehlermeldung
    type    = param
    cmd       {DUT -h -a 1>/dev/null ; echo "$?"}
    expect    {^1
    ERROR: Wrong arguments were used.$}
}

test {
    name    = 5a. Korrekter Aufruf mit einfacher Multiplikation
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 5 10 MUL 1> ./out/mul1_result.out 2>./out/mul1_history.out ; diff ./out/mul1_result.out ./testfaelle/mul1.exp && diff ./out/mul1_history.out ./testfaelle/mul1_history.exp && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 5b. Korrekter Aufruf mit einfacher Multiplikation 
    comment = Erwartet die History auf stderr und prueft nur diese
    type    = param
    cmd       {DUT 5 10 MUL 2>&1 1>/dev/null}
    expect    {^> MUL 5 10$}
}

test {
    name    = 5c. Korrekter Aufruf mit einfacher Multiplikation
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 5 10 MUL 2>/dev/null }
    expect    {^50$}
}

test {
    name    = 6a. Korrekter Aufruf mit einfacher Division
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 100 25 DIV 1> ./out/div1_result.out 2>./out/div1_history.out ; diff ./out/div1_result.out ./testfaelle/div1_result.exp && diff ./out/div1_history.out ./testfaelle/div1_history.exp && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 6b. Korrekter Aufruf mit einfacher Division 
    comment = Erwartet die History auf stderr und prueft nur diese
    type    = param
    cmd       {DUT 100 25 DIV 2>&1 1>/dev/null}
    expect    {^> DIV 100 25$}
}

test {
    name    = 6c. Korrekter Aufruf mit einfacher Division
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 100 25 DIV 2>/dev/null }
    expect    {^4$}
}

test {
    name    = 7a. Korrekter Aufruf mit einfacher Subtraktion
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 7 5 SUB 1> ./out/sub1_result.out 2>./out/sub1_history.out ; diff ./out/sub1_result.out ./testfaelle/sub1_result.exp && diff ./out/sub1_history.out ./testfaelle/sub1_history.exp && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 7b. Korrekter Aufruf mit einfacher Subtraktion 
    comment = Erwartet die History auf stderr und prueft nur diese
    type    = param
    cmd       {DUT 7 5 SUB 2>&1 1>/dev/null}
    expect    {^> SUB 7 5$}
}

test {
    name    = 7c. Korrekter Aufruf mit einfacher Subtraktion
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 7 5 SUB 2>/dev/null }
    expect    {^2$}
}

test {
    name    = 8a. Korrekter Aufruf mit einfacher MOD
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 10 2 MOD 1> ./out/mod1_result.out 2>./out/mod1_history.out ; diff ./out/mod1_result.out ./testfaelle/mod1_result.exp && diff ./out/mod1_history.out ./testfaelle/mod1_history.exp && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 8b. Korrekter Aufruf mit einfacher MOD 
    comment = Erwartet die History auf stderr und prueft nur diese
    type    = param
    cmd       {DUT 10 2 MOD 2>&1 1>/dev/null}
    expect    {^> MOD 10 2$}
}

test {
    name    = 8c. Korrekter Aufruf mit einfacher MOD
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 10 2 MOD 2>/dev/null }
    expect    {^0$}
}

test {
    name    = 9a. Korrekter Aufruf mit einfacher EXP
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 5 2 EXP 1> ./out/exp1_result.out 2>./out/exp1_history.out ; diff ./out/exp1_result.out ./testfaelle/exp1_result.exp && diff ./out/exp1_history.out ./testfaelle/exp1_history.exp && echo "ok"}
    expect    {^ok$}
}

test {
    name    = 9b. Korrekter Aufruf mit einfacher EXP 
    comment = Erwartet die History auf stderr und prueft nur diese
    type    = param
    cmd       {DUT 5 2 EXP 2>&1 1>/dev/null}
    expect    {^> EXP 5 2$}
}

test {
    name    = 9c. Korrekter Aufruf mit einfacher EXP
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 5 2 EXP 2>/dev/null }
    expect    {^25$}
}

test {
    name    = 10c. DIV mit 0
    comment = Erwartet Fehler
    type    = param
    cmd       {DUT 10 0 DIV 1>/dev/null ; echo "$?"}
    expect    {^3
    ERROR: Dont div by zero, please'$}
}
test {
    name    = 11a. ADD SUB MUL DIV EXP MOD 1
    comment = Erwartet die History-Ausgabe auf stderr und das Ergebnis auf stdout, prueft beides
    type    = param
    cmd       {DUT 5 4 ADD 2 SUB 3 MUL 7 DIV 3 EXP 2 MOD 1> ./out/everything1_result.out 2>./out/everything1_history.out ; diff ./out/everything1_result.out ./testfaelle/everything1_result.exp && diff ./out/everything1_history.out ./testfaelle/everything1_history.exp && echo "ok"}
    expect    {^ok$}
}
test {
    name    = 11b. ADD SUB MUL DIV EXP MOD 1
    comment = Erwartet das Ergebnis auf stdout und prueft nur dieses
    type    = param
    cmd       {DUT 5 4 ADD 2 SUB 3 MUL 7 DIV 3 EXP 2 MOD 2>/dev/null }
    expect    {^1$}
}
test {
    name    = 12a DIV 0 Fehler
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 5 0 DIV 1>/dev/null ; echo "$?"}
    expect    {^3
ERROR: Dont div by zero, please'$}
}
test {
    name    = 12a2 DIV 0 Fehler
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 7825825 0 DIV 1>./out/divZero1_result.out 2> ./out/divZero1_history.out ; diff ./out/divZero1_result.out ./testfaelle/divZero1_result.exp && diff ./out/divZero1_history.out ./testfaelle/divZero1_history.exp && echo "ok"}
    expect    {^ok$}
}
test {
    name    = 12b MOD 0 Fehler
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 1 0 MOD 1>/dev/null ; echo "$?"}
    expect    {^4
    ERROR: Dont mod with zero, please'$}
}
test {
    name    = 12b2 MOD 0 Fehler
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 1 0 MOD 1>./out/modZero_result.out 2> ./out/modZero_history.out ; diff ./out/modZero_result.out ./testfaelle/modZero_result.exp && diff ./out/modZero_history.out ./testfaelle/modZero_history.exp && echo "ok"}
    expect    {^ok$}
}
test {
    name    = 12c EXP Negative Zahl Fehler
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 100 -2 EXP 1>/dev/null ; echo "$?"}
    expect    {^5
    '$}
}
test {
    name    = 12d EXP Negative Zahl Fehler
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 100 -2 EXP 1>./out/negativeExp1_result.out 2> ./out/negativeExp1_history.out ; diff ./out/negativeExp1_result.out ./testfaelle/negativeExp1_result.exp && diff ./out/negativeExp1_history.out ./testfaelle/negativeExp1_history.exp && echo "ok"}
    expect    {^ok$}
}
test {
    name    = 13 Zuviele Zahlen (am Anfang)
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 1 2 3 ADD 1>/dev/null ; echo "$?"}
    expect    {^6
    ERROR: Please use a correct operator'$}
}
test {
    name    = 14 Zuviele Zahlen (am Ende)
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 1 2 ADD 1 2 1>/dev/null ; echo "$?"}
    expect    {^6
    ERROR: Please use a correct operator'$}
}
test {
    name    = 15 Zuviele Operatoren (zuviele Operatoren am Anfang)
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT SUB 1 2 1>/dev/null ; echo "$?"}
    expect    {^1
    ERROR: Wrong arguments were used.'$}
}
test {
    name    = 16 Zuviele Operatoren (zuviele Operatoren am Ende)
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 1 2 ADD SUB 1>/dev/null ; echo "$?"}
    expect    {^1
    ERROR: Wrong arguments were used.'$}
}
test {
    name    = 17 Zuviele Operatoren (mitten drin)
    comment = Erwartet, dass Programm abbricht (mit Fehler)
    type    = param
    cmd       {DUT 1 2 ADD SUB 2 3 1>/dev/null ; echo "$?"}
    expect    {^6
    ERROR: Please use a correct operator'$}
}
test {
    name    = 17b Zuviele Operatoren (mitten drin)
    comment = Erwartet einen exit code von 0 bei korrektem Hilfeaufruf
    type    = param
    cmd       {DUT 1 2 ADD SUB 2 3 1>/dev/null ; echo "$?"}
    expect    {^6
    ERROR: Wrong arguments were used.$}
}